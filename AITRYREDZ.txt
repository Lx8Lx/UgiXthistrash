local MarketplaceService = game:GetService("MarketplaceService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local PlayerMouse = Player:GetMouse()

local AdvancedUI = {
    Themes = {
        Dark = {
            Main = Color3.fromRGB(30, 30, 35),
            Secondary = Color3.fromRGB(40, 40, 45),
            Accent = Color3.fromRGB(100, 150, 255),
            Text = Color3.fromRGB(240, 240, 240),
            SubText = Color3.fromRGB(180, 180, 180),
            Border = Color3.fromRGB(60, 60, 65)
        },
        Light = {
            Main = Color3.fromRGB(240, 240, 245),
            Secondary = Color3.fromRGB(220, 220, 225),
            Accent = Color3.fromRGB(80, 120, 220),
            Text = Color3.fromRGB(40, 40, 45),
            SubText = Color3.fromRGB(100, 100, 110),
            Border = Color3.fromRGB(180, 180, 185)
        },
        Purple = {
            Main = Color3.fromRGB(35, 30, 40),
            Secondary = Color3.fromRGB(45, 40, 50),
            Accent = Color3.fromRGB(160, 80, 220),
            Text = Color3.fromRGB(230, 230, 235),
            SubText = Color3.fromRGB(170, 170, 175),
            Border = Color3.fromRGB(70, 65, 75)
        }
    },
    Config = {
        WindowSize = {600, 450},
        TabWidth = 180,
        CurrentTheme = "Dark",
        AnimationSpeed = 0.25
    },
    Elements = {},
    Tabs = {},
    Options = {},
    Flags = {},
    Connections = {},
    Instances = {}
}

local function Create(className, props, children)
    local instance = Instance.new(className)
    if props then
        for prop, value in pairs(props) do
            instance[prop] = value
        end
    end
    if children then
        for _, child in ipairs(children) do
            child.Parent = instance
        end
    end
    return instance
end

local function ApplyTheme(instance, themeType)
    local theme = AdvancedUI.Themes[AdvancedUI.Config.CurrentTheme]
    local properties = {
        Frame = {BackgroundColor3 = theme.Secondary},
        MainFrame = {BackgroundColor3 = theme.Main},
        Text = {TextColor3 = theme.Text},
        SubText = {TextColor3 = theme.SubText},
        Accent = {BackgroundColor3 = theme.Accent, TextColor3 = theme.Accent},
        Border = {Color = theme.Border},
        ScrollBar = {ScrollBarImageColor3 = theme.Accent}
    }
    
    if properties[themeType] then
        for prop, value in pairs(properties[themeType]) do
            instance[prop] = value
        end
    end
    
    table.insert(AdvancedUI.Instances, {Instance = instance, Type = themeType})
end

local function Tween(instance, properties, duration, callback)
    local info = TweenInfo.new(duration or AdvancedUI.Config.AnimationSpeed, Enum.EasingStyle.Quint)
    local tween = TweenService:Create(instance, info, properties)
    tween:Play()
    if callback then
        tween.Completed:Connect(callback)
    end
    return tween
end

local function MakeDraggable(frame, handle)
    handle = handle or frame
    local dragStart, startPos
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragStart = nil
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragStart then
            local delta = input.Position - dragStart
            Tween(frame, {Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, 
                          startPos.Y.Scale, startPos.Y.Offset + delta.Y)}, 0.1)
        end
    end)
end

local function SaveConfig()
    if writefile then
        local success, encoded = pcall(HttpService.JSONEncode, HttpService, AdvancedUI.Config)
        if success then
            writefile("AdvancedUI_Config.json", encoded)
        end
    end
end

local function LoadConfig()
    if readfile and isfile and isfile("AdvancedUI_Config.json") then
        local success, decoded = pcall(function()
            return HttpService:JSONDecode(readfile("AdvancedUI_Config.json"))
        end)
        if success then
            for key, value in pairs(decoded) do
                AdvancedUI.Config[key] = value
            end
        end
    end
end

LoadConfig()

local ScreenGui = Create("ScreenGui", {
    Name = "AdvancedUI",
    Parent = CoreGui
}, {
    Create("UIScale", {Scale = 1})
})

local MainWindow = Create("Frame", {
    Size = UDim2.new(0, AdvancedUI.Config.WindowSize[1], 0, AdvancedUI.Config.WindowSize[2]),
    Position = UDim2.new(0.5, -AdvancedUI.Config.WindowSize[1]/2, 0.5, -AdvancedUI.Config.WindowSize[2]/2),
    BackgroundTransparency = 0.05,
    Parent = ScreenGui,
    Name = "MainWindow"
})
ApplyTheme(MainWindow, "MainFrame")
MakeDraggable(MainWindow)

local TopBar = Create("Frame", {
    Size = UDim2.new(1, 0, 0, 30),
    BackgroundTransparency = 1,
    Parent = MainWindow,
    Name = "TopBar"
})

local TitleLabel = Create("TextLabel", {
    Position = UDim2.new(0, 15, 0.5, 0),
    AnchorPoint = Vector2.new(0, 0.5),
    Text = "Advanced UI",
    Font = Enum.Font.GothamBold,
    TextSize = 14,
    Parent = TopBar
})
ApplyTheme(TitleLabel, "Text")

local SubTitleLabel = Create("TextLabel", {
    Position = UDim2.new(0, 15, 0.5, 15),
    AnchorPoint = Vector2.new(0, 0.5),
    Text = "Premium Interface",
    Font = Enum.Font.Gotham,
    TextSize = 10,
    Parent = TopBar
})
ApplyTheme(SubTitleLabel, "SubText")

local CloseButton = Create("TextButton", {
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(1, -10, 0.5, 0),
    AnchorPoint = Vector2.new(1, 0.5),
    Text = "X",
    Font = Enum.Font.GothamBold,
    TextSize = 12,
    BackgroundTransparency = 1,
    Parent = TopBar
})
ApplyTheme(CloseButton, "Text")

local MinimizeButton = Create("TextButton", {
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(1, -40, 0.5, 0),
    AnchorPoint = Vector2.new(1, 0.5),
    Text = "_",
    Font = Enum.Font.GothamBold,
    TextSize = 12,
    BackgroundTransparency = 1,
    Parent = TopBar
})
ApplyTheme(MinimizeButton, "Text")

local TabContainer = Create("ScrollingFrame", {
    Size = UDim2.new(0, AdvancedUI.Config.TabWidth, 1, -30),
    BackgroundTransparency = 1,
    ScrollBarThickness = 2,
    Parent = MainWindow,
    Name = "TabContainer"
})
ApplyTheme(TabContainer, "ScrollBar")

local ContentContainer = Create("Frame", {
    Size = UDim2.new(1, -AdvancedUI.Config.TabWidth, 1, -30),
    Position = UDim2.new(0, AdvancedUI.Config.TabWidth, 0, 30),
    BackgroundTransparency = 1,
    ClipsDescendants = true,
    Parent = MainWindow,
    Name = "ContentContainer"
})

local function CreateTab(name, icon)
    local tabButton = Create("TextButton", {
        Size = UDim2.new(1, -10, 0, 30),
        Text = "",
        Parent = TabContainer,
        Name = "Tab_"..name
    })
    ApplyTheme(tabButton, "Frame")
    
    local tabIcon = Create("ImageLabel", {
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(0, 5, 0.5, 0),
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundTransparency = 1,
        Image = icon or "",
        Parent = tabButton
    })
    
    local tabLabel = Create("TextLabel", {
        Size = UDim2.new(1, -30, 1, 0),
        Position = UDim2.new(0, 30, 0, 0),
        Text = name,
        Font = Enum.Font.GothamMedium,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        BackgroundTransparency = 1,
        Parent = tabButton
    })
    ApplyTheme(tabLabel, "Text")
    
    local tabContent = Create("ScrollingFrame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 2,
        Visible = false,
        Name = "Content_"..name
    })
    ApplyTheme(tabContent, "ScrollBar")
    
    local tab = {
        Button = tabButton,
        Content = tabContent,
        Name = name
    }
    
    table.insert(AdvancedUI.Tabs, tab)
    return tab
end

local function CreateOption(optionType, config, parent)
    local option = {}
    
    if optionType == "Button" then
        local buttonFrame = Create("Frame", {
            Size = UDim2.new(1, -20, 0, 30),
            Parent = parent,
            Name = "Button_"..config.Name
        })
        ApplyTheme(buttonFrame, "Frame")
        
        local buttonLabel = Create("TextLabel", {
            Size = UDim2.new(1, -10, 1, 0),
            Position = UDim2.new(0, 10, 0, 0),
            Text = config.Name,
            Font = Enum.Font.GothamMedium,
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundTransparency = 1,
            Parent = buttonFrame
        })
        ApplyTheme(buttonLabel, "Text")
        
        local button = Create("TextButton", {
            Size = UDim2.new(1, 0, 1, 0),
            Text = "",
            BackgroundTransparency = 1,
            Parent = buttonFrame
        })
        
        button.MouseEnter:Connect(function()
            Tween(buttonFrame, {BackgroundTransparency = 0.8})
        end)
        
        button.MouseLeave:Connect(function()
            Tween(buttonFrame, {BackgroundTransparency = 0})
        end)
        
        button.Activated:Connect(function()
            if config.Callback then
                config.Callback()
            end
        end)
        
        option = {
            Frame = buttonFrame,
            SetText = function(text)
                buttonLabel.Text = text
            end
        }
    elseif optionType == "Toggle" then
        local toggleFrame = Create("Frame", {
            Size = UDim2.new(1, -20, 0, 30),
            Parent = parent,
            Name = "Toggle_"..config.Name
        })
        ApplyTheme(toggleFrame, "Frame")
        
        local toggleLabel = Create("TextLabel", {
            Size = UDim2.new(1, -50, 1, 0),
            Position = UDim2.new(0, 10, 0, 0),
            Text = config.Name,
            Font = Enum.Font.GothamMedium,
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundTransparency = 1,
            Parent = toggleFrame
        })
        ApplyTheme(toggleLabel, "Text")
        
        local toggleSwitch = Create("Frame", {
            Size = UDim2.new(0, 40, 0, 20),
            Position = UDim2.new(1, -10, 0.5, 0),
            AnchorPoint = Vector2.new(1, 0.5),
            Parent = toggleFrame
        })
        ApplyTheme(toggleSwitch, "Border")
        
        local toggleButton = Create("TextButton", {
            Size = UDim2.new(0, 16, 0, 16),
            Position = UDim2.new(0, 2, 0.5, 0),
            AnchorPoint = Vector2.new(0, 0.5),
            Text = "",
            Parent = toggleSwitch
        })
        ApplyTheme(toggleButton, "Accent")
        
        local isToggled = config.Default or false
        
        local function UpdateToggle()
            if isToggled then
                Tween(toggleButton, {Position = UDim2.new(1, -2, 0.5, 0), 0.2})
                Tween(toggleButton, {BackgroundTransparency = 0}, 0.2})
            else
                Tween(toggleButton, {Position = UDim2.new(0, 2, 0.5, 0), 0.2})
                Tween(toggleButton, {BackgroundTransparency = 0.5}, 0.2})
            end
            
            if config.Callback then
                config.Callback(isToggled)
            end
            
            if config.Flag then
                AdvancedUI.Flags[config.Flag] = isToggled
            end
        end
        
        toggleButton.Activated:Connect(function()
            isToggled = not isToggled
            UpdateToggle()
        end)
        
        UpdateToggle()
        
        option = {
            Frame = toggleFrame,
            SetState = function(state)
                isToggled = state
                UpdateToggle()
            end,
            SetText = function(text)
                toggleLabel.Text = text
            end
        }
    end
    
    return option
end

function AdvancedUI:CreateWindow(config)
    local window = {
        Tabs = {},
        Minimized = false,
        Config = config or {}
    }
    
    TitleLabel.Text = config.Title or "Advanced UI"
    SubTitleLabel.Text = config.SubTitle or ""
    
    CloseButton.Activated:Connect(function()
        ScreenGui:Destroy()
    end)
    
    MinimizeButton.Activated:Connect(function()
        if window.Minimized then
            Tween(MainWindow, {Size = UDim2.new(0, AdvancedUI.Config.WindowSize[1], 0, AdvancedUI.Config.WindowSize[2])}, 0.3)
            window.Minimized = false
        else
            Tween(MainWindow, {Size = UDim2.new(0, AdvancedUI.Config.WindowSize[1], 0, 30)}, 0.3)
            window.Minimized = true
        end
    end)
    
    function window:CreateTab(name, icon)
        local tab = CreateTab(name, icon)
        table.insert(self.Tabs, tab)
        
        local tabFunctions = {
            AddButton = function(buttonConfig)
                return CreateOption("Button", buttonConfig, tab.Content)
            end,
            AddToggle = function(toggleConfig)
                return CreateOption("Toggle", toggleConfig, tab.Content)
            end,
            Show = function()
                for _, otherTab in pairs(self.Tabs) do
                    otherTab.Content.Visible = false
                end
                tab.Content.Visible = true
                tab.Content.Parent = ContentContainer
            end
        }
        
        tab.Button.Activated:Connect(function()
            tabFunctions.Show()
        end)
        
        if #self.Tabs == 1 then
            tabFunctions.Show()
        end
        
        return tabFunctions
    end
    
    return window
end

function AdvancedUI:SetTheme(themeName)
    if self.Themes[themeName] then
        self.Config.CurrentTheme = themeName
        SaveConfig()
        
        for _, instanceData in pairs(self.Instances) do
            ApplyTheme(instanceData.Instance, instanceData.Type)
        end
    end
end

return AdvancedUI
